// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "./IUniswapV2Factory.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";


library Curve {
    using SafeMath for uint256;
    function integrate(uint256 m, uint256 b, uint256 x0, uint256 dx) internal pure returns (uint256) {
        uint256 x0Squared = x0 * x0;
        uint256 x1 = x0 + dx;
        uint256 x1Squared = x1 * x1;
        uint256 squareDiff = x1Squared - x0Squared;

        uint256 term1 = m * squareDiff / 2;
        uint256 term2 = b * dx;

        return term1 + term2;
    }

    function y(uint128 slope, uint128 yIntercept, uint256 x) internal pure returns (uint256) {
        return slope * x + yIntercept;
    }
}


contract MyToken is ERC20, ERC20Burnable, Ownable {
    using SafeMath for uint256;
    constructor(string memory name, string memory symbol, uint _initialSupply) ERC20(name, symbol) Ownable(msg.sender) {
        _mint(msg.sender, _initialSupply); 
    }

    function renounceTokenOwnership() public onlyOwner {
        renounceOwnership();
    }

    function mint(address _to, uint _amount) public onlyOwner {
        _mint(_to, _amount);
    }

    function burn(address _to, uint _amount) public onlyOwner {
        _burn(_to, _amount);
    }
}

contract Launchpad is Ownable, ReentrancyGuard {
    using SafeMath for uint256;

    uint initialPrice = 0.000000029 ether;
    mapping(address => uint) public currentPrice;
    uint PriceEscalation = 0.0000000011 ether;
    uint initialSupply = 0 ether;

    uint256 public feePercent = 12;
    uint256 public deployerFeePercent = 10;

    IUniswapV2Router02 public uniswapRouter;

    struct Token {
        string name;
        string symbol;
        uint256 supply;
        address owner;
        bool launched;
        uint256 marketCap;
        uint256 ethCollected;
        uint256 tokenCreated;
        uint256 tokenLaunched;
        string[] desc;
    }

    
    address[] public tokenContracts;
    address public uniswapRouterAddress;

    mapping(address => Token) public tokens;
    mapping(address => uint256) public feesCollected;
    mapping(address => uint256) public deployerFees;

    event TokenCreated(address indexed tokenAddress, string name, string symbol, uint256 totalSupply, address indexed owner);
    event TokensWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);
    event TokensPurchased(address indexed tokenAddress, address indexed buyer, uint256 amount, uint256 ethPaid);
    event TokensSold(address indexed tokenAddress, address indexed seller, uint256 amount, uint256 ethReceived);
    event TokenLaunched(address indexed tokenAddress, uint256 marketCap, uint256 liquidity);
    event LiquidityProvided(address indexed tokenAddress, uint256 amountToken, uint256 amountETH);
    event TokensReceived(address indexed tokenAddress, address indexed sender, uint256 amount);
    event FeePercentUpdated(uint256 newFeePercent);
    event DeployerFeePercentUpdated(uint256 newDeployerFeePercent);

    constructor() Ownable(msg.sender) {
        uniswapRouterAddress = 0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008;
        uniswapRouter = IUniswapV2Router02(uniswapRouterAddress);
    }

    receive() external payable {}

    function createToken(string memory name, string memory symbol,string[] memory _desc) external {
        require(bytes(name).length > 0 && bytes(symbol).length > 0, "Name and symbol must not be empty");

        address ownerAddress = msg.sender; // Anyone can create a token

        MyToken newToken = new MyToken(name, symbol,initialSupply);
        newToken.transferOwnership(address(this)); // Transfer ownership to this contract

        tokens[address(newToken)] = Token({
            name: name,
            symbol: symbol,
            supply: 0,
            owner: ownerAddress,
            launched: false,
            marketCap: 0,
            ethCollected: 0,
            tokenCreated: block.timestamp,
            tokenLaunched: 0,
            desc: _desc
        });

        tokenContracts.push(address(newToken)); // Store the address of the newly created token contract
        currentPrice[address(newToken)] = initialPrice;
        emit TokenCreated(address(newToken), name, symbol, 0, ownerAddress);
    }

    function getEthCollected(address tokenAddress) external view returns (uint256) {
        return tokens[tokenAddress].ethCollected;
    }

    function getTotalEthCollected() external view returns (uint256) {
        uint256 totalEthCollected = 0;
        for (uint256 i = 0; i < tokenContracts.length; i++) {
            totalEthCollected = totalEthCollected.add(tokens[tokenContracts[i]].ethCollected);
        }
        return totalEthCollected;
    }

    function getTokenContractsCount() external view returns (uint256) {
        return tokenContracts.length;
    }

    // Function to buy tokens with Ether
    function buyTokens(address tokenAddress) external payable nonReentrant {
        _buyTokens(tokenAddress);
    }

    function _buyTokens(address tokenAddress) private {
        Token storage token = tokens[tokenAddress];

        uint256 fee = msg.value.mul(feePercent).div(10000);
        uint256 feeToDeployer = fee.mul(deployerFeePercent).div(100);
        uint256 feeToContract = fee.sub(feeToDeployer);

        // Amount after fee deduction
        uint256 amountAfterFee = msg.value.sub(fee);

        // Calculate token price and number of tokens to mint
        uint256 priceForTokens = calculatePrice(IERC20(tokenAddress).totalSupply());
        uint256 tokensToMint = amountAfterFee.mul(10**18).div(priceForTokens);

        currentPrice[tokenAddress] = priceForTokens;

        // Collect fees
        feesCollected[tokenAddress] = feesCollected[tokenAddress].add(feeToContract);
        deployerFees[tokenAddress] = deployerFees[tokenAddress].add(feeToDeployer);

        // Transfer fee to the deployer
        payable(owner()).transfer(feeToDeployer);

        // Transfer tokens to the buyer and the contract
        MyToken(tokenAddress).mint(msg.sender, tokensToMint);
        MyToken(tokenAddress).mint(address(this), tokensToMint);

        // Update ethCollected and supply
        token.ethCollected = token.ethCollected.add(msg.value);
        token.supply = token.supply.add(tokensToMint.mul(2));
        token.marketCap = IERC20(tokenAddress).totalSupply().mul(currentPrice[tokenAddress]).div(10**18);

        emit TokensPurchased(tokenAddress, msg.sender, tokensToMint, msg.value);

        // Auto-launch the token if criteria met
        if (token.ethCollected >= 0.01 ether && !token.launched) {
            autoLaunchToken(tokenAddress);
        }
    }


    function calculatePrice(uint256 _totalS) public view returns (uint256) {
      // Lower the interval to make price changes more responsive
      uint256 knots = (_totalS.sub(initialSupply)).div(1000000 * (10**18));
      uint256 escalation = initialPrice.add(knots.mul(PriceEscalation));
      return escalation;
    }



uint256 constant GAS_RESERVE_AMOUNT = 0.00005 ether; // Gas reserve amount
uint256 constant MAX_RESERVE_SALES = 5; // Maximum number of sells to reserve gas for

mapping(address => uint256) public sellCount; // Track the number of sells for each token

function sellTokens(address tokenAddress, uint256 amount) external payable nonReentrant {
    Token storage token = tokens[tokenAddress]; // Get token information
    require(amount > 0, "Amount must be greater than 0"); // Ensure amount is valid
    require(IERC20(tokenAddress).balanceOf(msg.sender) >= amount, "Insufficient token balance"); // Check sender's token balance
    require(IERC20(tokenAddress).allowance(msg.sender, address(this)) >= amount, "Allowance not set"); // Check allowance

    // Calculate Ether received from the transaction based on the current price of the token
    uint256 ethReceived = amount * currentPrice[tokenAddress] / (10**18);

    // Check if this is one of the first 5 sells and deduct gas reserve if needed
    if (sellCount[tokenAddress] < MAX_RESERVE_SALES) {
        // Ensure that the Ether received is greater than or equal to the gas reserve amount
        require(ethReceived >= GAS_RESERVE_AMOUNT, "Insufficient funds for gas reserve");

        // Deduct gas reserve from the Ether received
        ethReceived -= GAS_RESERVE_AMOUNT;

        // Increment sell count
        sellCount[tokenAddress]++;
    }

    // Calculate fees
    uint256 fee = ethReceived.mul(feePercent).div(1000);
    uint256 feeToDeployer = fee.mul(deployerFeePercent).div(100);
    uint256 feeToContract = fee.sub(feeToDeployer);

    // Collect fees
    feesCollected[tokenAddress] = feesCollected[tokenAddress].add(feeToContract);
    deployerFees[tokenAddress] = deployerFees[tokenAddress].add(feeToDeployer);

    // Transfer tokens from seller to contract
    IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);

    // Transfer Ether to seller (excluding gas reserve and fees)
    payable(msg.sender).transfer(ethReceived - fee);

    // Transfer gas reserve to contract
    token.ethCollected += GAS_RESERVE_AMOUNT;

    // Update token supply and market cap
    token.supply = token.supply.sub(amount);
    token.marketCap = IERC20(tokenAddress).totalSupply().mul(currentPrice[tokenAddress]).div(10**18);

    // Emit event for token sale
    emit TokensSold(tokenAddress, msg.sender, amount, ethReceived);
}



    function autoLaunchToken(address tokenAddress) internal onlyOwner {
        Token storage token = tokens[tokenAddress];
        require(!token.launched, "Token already launched");

        // Update launched status
        token.launched = true;
        token.tokenLaunched = block.timestamp;

        // Emit event
        emit TokenLaunched(tokenAddress, token.marketCap, token.ethCollected);

        // Provide liquidity to Uniswap
        provideLiquidity(tokenAddress);

        // Renounce ownership of the token contract
        MyToken(tokenAddress).renounceTokenOwnership();
    }

    function provideLiquidity(address tokenAddress) internal {
    Token storage token = tokens[tokenAddress];
    uint256 amountToken = token.supply.div(2); // Provide half of the total token supply
    uint256 amountETH = token.ethCollected * 95 / 100;

    // Calculate 2.5% of token supply to burn
    uint256 burnAmountToken = token.supply * 25 / 1000; // 2.5% expressed as a fraction
    require(token.supply >= burnAmountToken, "Insufficient token supply for burning");
    
    // Burn 2.5% of token supply
    token.supply -= burnAmountToken;

    require(amountToken > 0 && amountETH > 0, "Insufficient liquidity");

    // Approve Uniswap Router to spend tokens
    require(MyToken(tokenAddress).approve(uniswapRouterAddress, amountToken), "Approval failed");

    // Provide liquidity to Uniswap and receive LP tokens
    (uint256 amountTokenProvided, uint256 amountETHProvided, uint256 liquidity) = uniswapRouter.addLiquidityETH{value: amountETH}(
        tokenAddress,
        amountToken,
        0, // Accept any amount of tokens
        0, // Accept any amount of ETH
        address(this),
        block.timestamp
    );

    require(liquidity > 0, "Failed to provide liquidity");

    // Get the address of the Uniswap pair
    address pair = IUniswapV2Factory(uniswapRouter.factory()).getPair(tokenAddress, uniswapRouter.WETH());
    require(pair != address(0), "Failed to get pair address");

    // Burn the LP tokens by sending them to the burn address
    IUniswapV2Pair(pair).transfer(0x000000000000000000000000000000000000dEaD, liquidity);

    emit LiquidityProvided(tokenAddress, amountTokenProvided, amountETHProvided);
}



    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {
        if (_returnData.length < 68) return 'Transaction reverted silently';

        assembly {
            _returnData := add(_returnData, 0x04)
        }
        return abi.decode(_returnData, (string));
    }

    function getTokens() public view returns (Token[] memory) {
        Token[] memory arr1 = new Token[](tokenContracts.length);

        for (uint i = 0; i < tokenContracts.length; i++) {
            Token memory tx1 = tokens[tokenContracts[i]];
            arr1[i] = tx1;
        }
        return arr1;
    }

    function withdrawFees(address tokenAddress) external onlyOwner {
      uint256 amount = feesCollected[tokenAddress];
      uint256 deployerFee = deployerFees[tokenAddress];
      require(amount > 0, "No fees to withdraw");

      feesCollected[tokenAddress] = 0;
      deployerFees[tokenAddress] = 0;

      // Instead of transferring fees separately, accumulate and transfer them in a single transaction
      uint256 totalAmount = amount + deployerFee;
      payable(owner()).transfer(totalAmount);

      emit TokensWithdrawn(tokenAddress, owner(), totalAmount);
    }


}

